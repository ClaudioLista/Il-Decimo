<%- include('../includes/head.ejs') %>
<link rel="stylesheet" href="/css/match.css">
<link rel="stylesheet" href="/css/chat.css">
<script src='/socket.io/socket.io.js'></script>

<style>
   
    button {
        background-color: #DAA520;
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin-top: 20px;
        cursor: pointer;
    }
    #chatMessage {
        width: calc(100% - 20px);
        margin: auto;
        padding: 5px 0;
    }
    </style>
</head>

<script> 
if ("<%= isAuthenticated %>") {
    socket = io();
    room = "<%= m._id %>"; 
    user = "<%= user %>";
    socket.emit('create or join', room);
}

function sendMessage() {
    let textarea = document.getElementById('chatMessage');
	let chatMessage = textarea.value;
    var currentdate = new Date(); 
     var datetime = 
    //                 + currentdate.getDate() + "/"
    // //             + (currentdate.getMonth()+1) + " @ "  
                + currentdate.getHours() + ":"  
                + currentdate.getMinutes();
    console.log(datetime);            

	console.log(`You sent a message: ${chatMessage}`);
	
	// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
	scratchPad.insertAdjacentHTML( 'beforeEnd', `<p>${datetime}: </p>`);
	scratchPad.insertAdjacentHTML( 'beforeEnd', `<p style="color:green"> ${chatMessage} </p>`);	 

	if(chatMessage == "Bye"){
		scratchPad.insertAdjacentHTML( 'beforeEnd', '<p>Time: ' + (performance.now() / 1000).toFixed(3) + ' --> Sending "Bye" to server...</p>');
		console.log('Sending "Bye" to server');

		socket.emit('Bye', room);

		// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
		scratchPad.insertAdjacentHTML( 'beforeEnd', '<p>Time: ' + (performance.now() / 1000).toFixed(3) + ' --> Going to disconnect...</p>');
		console.log('Going to disconnect...');

		// Disconnect from server
		// not necessary, the server will disconnect the client
		// socket.disconnect();
	} else {
		socket.emit('message', {
			room: room,
			message: chatMessage,
            name: user,
            date: datetime
		});
	}
    textarea.value = ''
}

//Handle 'created' message
socket.on('created', (room) => {	 
	console.log(`room ${room} has been created!`);
	console.log('This peer is the initiator...');

	// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
	//scratchPad.insertAdjacentHTML( 'beforeEnd', `<p>Time: ${(performance.now() / 1000).toFixed(3)} --> room ${room} has been created! </p>`);
    //scratchPad.insertAdjacentHTML( 'beforeEnd', `<p>Time: ${(performance.now() / 1000).toFixed(3)} --> This peer is the initiator... </p>`);
});

//Handle 'full' message
socket.on('full', (room) => {
	console.log(`room ${room} is too crowded!`);

	// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
    scratchPad.insertAdjacentHTML( 'beforeEnd', `<p>Time: ${(performance.now() / 1000).toFixed(3)} --> room ${room} is too crowded! </p>`);
});

//Handle 'remotePeerJoining' message
socket.on('remotePeerJoining', (room) => {
	console.log(`Request to join ${room}`);
	console.log('You are the initiator!');

	// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
    //scratchPad.insertAdjacentHTML( 'beforeEnd', `<p style="color:red">Time: ${(performance.now() / 1000).toFixed(3)} --> Message from server: request to join room ${room}</p>`);
});

//Handle 'broadcast: joined' message
socket.on('broadcast: joined', (msg) => {

	// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
    //scratchPad.insertAdjacentHTML( 'beforeEnd', `<p style="color:red">Time: ${(performance.now() / 1000).toFixed(3)} --> Broadcast message from server: ${msg}</p>`);

	console.log(`Broadcast message from server: ${msg}`);	  
});

//Handle 'joined' message
socket.on('joined', (msg) => {
	console.log(`You joined ${room}`);
	console.log('You are the joiner!');

	// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
    //scratchPad.insertAdjacentHTML( 'beforeEnd', `<p style="color:red">Time: ${(performance.now() / 1000).toFixed(3)} --> Message from server: you joined the room ${room}</p>`); 
});

//Handle 'message' message
socket.on('message', (message) => {
	console.log(`Got message from other peer: ${message}`);
	
	// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
	scratchPad.insertAdjacentHTML( 'beforeEnd', `<p>${message.date} --> ${message.name}: </p>`);
    scratchPad.insertAdjacentHTML( 'beforeEnd', `<p style="color:blue"> ${message.message} </p>`);	  
});

//Handle 'Bye' message
socket.on('Bye', () => {
	console.log(`Got message from other peer: Bye`);
	
	// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
	scratchPad.insertAdjacentHTML( 'beforeEnd', `<p>Time: ${(performance.now() / 1000).toFixed(3)} --> Got message from other peer: </p>`);
    scratchPad.insertAdjacentHTML( 'beforeEnd', `<p style="color:blue"> Bye </p>`);	 

	console.log('Got "Bye" from other peer! Going to disconnect...');

	// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
	scratchPad.insertAdjacentHTML( 'beforeEnd', '<p>Time: ' + (performance.now() / 1000).toFixed(3) + ' --> Got "Bye" from other peer!</p>');
	scratchPad.insertAdjacentHTML( 'beforeEnd', '<p>Time: ' + (performance.now() / 1000).toFixed(3) + ' --> Sending "Ack" to server</p>');

	// Send 'Ack' back to remote party through server
	console.log('Sending "Ack" to server');

	socket.emit('Ack');

	console.log('Going to disconnect...');

	// Info, concerned messages exchange, are dynamically inserted in the HTML5 page
	scratchPad.insertAdjacentHTML( 'beforeEnd', '<p>Time: ' + (performance.now() / 1000).toFixed(3) + ' --> Going to disconnect...</p>');
	
	// Disconnect from server
	// not necessary, the server will disconnect the client
	// socket.disconnect();
});
</script>

<body>

    <%- include('../includes/navigation.ejs') %>
    
    <main class="centered">
        <h1><%= m.title %></h1>
        <hr>
        <div class="grid">
                <article class="card match-item">
                    <header class="card__header">
                        <h1 class="match__title"> Match Details </h1>
                    </header>
                    <hr>
                    <div class="card__content">
                        <h1>Players left: <%= m.totalPlayers - m.currentPlayers %></h1>
                        <br>
                        <h2 class="match__place">
                            Where: <%= m.placeName %>
                        </h2>
                        <br>
                        <h2 class="match__place">
                            When: <%= m.time.getDate().toString() + "-" + (m.time.getMonth()+1).toString() + "-" + m.time.getFullYear().toString() %>
                        </h2>
                        <br>
                        <h2 class="match__price">
                            <%= m.price %>â‚¬
                        </h2>
                        <br>
                        <p class="match__description">
                            <%= m.description %>
                        </p>
                    </div>
                    <div class="card__actions">
                        <% if (isAuthenticated) { %>
                            <a href="/matches/<%= m._id %>/<% if (!is_in) { %>join<% } else { %>unjoin<% } %>" class="btn">
                                <% if (!is_in) { %> Join <% } else { %> UnJoin <% } %> 
                            </a>
                        <% } %>
                    </div>
                    <br>
                </article>
                <article class="card match-item">
                    <header class="card__header">
                        <h2 class="match__title"> Players list
                        <i class="fa fa-futbol-o"></i>
                        </h2>
                    </header>
                    <hr>
                    <div class="card__content">
                        <h2 class="player__list">
                            <% for (let players of m.listPlayers.players) { %>
                                <h2><%= players.userId.usrName %></h2>
                            <% } %>
                        </h2>
                    </div>
                    <br>
                </article>
                <% if (isAuthenticated) { %>

                    <article class="card match-item">
                        <header class="card__header">
                            <h2 class="match__title"> Chat
                            </h2>
                        </header>
                        <hr>
                        <div class="card__content">
                            <div class="chatBox" id="scratchPad">

                                <% if (chat.length > 0) { %>
                                    
                                    <% for (let message of chat) { %>
                                    
                                        <p><%= message.date %> --> <%= message.name %>: </p>
                                        <p style="color:blue"> <%= message.msg %> </p>

                                        <% } %>

                                        <% } %>

                            </div>
                            <br>
                            <div id="container">
                                <input type="text" id="chatMessage" name="chat-message">
                                <button class="btn" onClick="sendMessage()">Send</button>
                            </div>
                        </div>
                        <br>
                    </article>
        
                <% } %>
        </div>
    </main>

<%- include('../includes/end.ejs') %>